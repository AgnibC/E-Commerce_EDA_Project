--Database Exploration- Where we explore various tables and columns in our database

select * from INFORMATION_SCHEMA.COLUMNS
where TABLE_NAME='dim_customers'

--Dimension Analyses 

select distinct country from gold.dim_customers

select distinct category, subcategory,product_name from gold.dim_products
order by 1,2,3

--Date Analyses; First and last order dates, and how many years of orders are available in our database

SELECT 
		MIN(order_date) as first_order_date ,
		MAX(order_date) as last_order_date,
		DATEDIFF(month, min(order_date), max(order_date)) as order_range
FROM gold.fact_sales

--Finding out the youngest and oldest customer

SELECT 
		MIN(birthdate) as Oldest_Birthdate,
		DATEDIFF(YEAR, MIN(birthdate), GETDATE()) as Age_Of_Oldest,
		MAX(birthdate) as Youngest_Birthdate,
		DATEDIFF(year, MAX(birthdate), GETDATE()) as Age_Of_Youngest
FROM gold.dim_customers

--MEASURES Analyses

--Finding Total Sales
SELECT SUM(sales_amount) as Total_Sales FROM gold.fact_sales

--How many items are sold?
SELECT SUM(quantity) as Total_Items_Sold FROM gold.fact_sales

--Find the average Selling Price
SELECT AVG(price) as Average_SP FROM gold.fact_sales

-- Total Number of Orders
SELECT COUNT(order_number) as Total_Orders FROM gold.fact_sales --This doesn't reflect the actual number of orders bacause a customer can purchase different items in a single order number; that's why distinct is more beneficial in this scenario
SELECT COUNT(distinct order_number) as Total_Unique_Orders FROM gold.fact_sales

--Total Number of Products
SELECT COUNT(distinct product_key) as TotaL_Number_of_Products FROM  gold.dim_products

--Total Number of Customers
SELECT COUNT(distinct customer_key) AS Total_Customers FROM gold.dim_customers

--Total nunber of customers who have placed an order
SELECT COUNT(DISTINCT customer_key) as Total_Customers_Placed_Order from gold.fact_sales

--KEY METRICS of The Business

SELECT 'Total Sales' as measure_name, SUM(sales_amount) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Items Sold' as measure_name, SUM(quantity) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Selling Price' as measure_name, AVG(price) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total No.Of Orders' as measure_name, COUNT(DISTINCT order_number) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total No.Of Products' as measure_name,COUNT(DISTINCT product_key) as measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Customers' as measure_name, COUNT(DISTINCT customer_key) as measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Customers who placed an Order' as measure_name, SUM(quantity) as measure_value FROM gold.fact_sales



--Magnitude Analyses- Analysing Measures by Different Dimensions

--Total Customers by Country
SELECT country,COUNT(customer_key) as total_customers
from gold.dim_customers
group by country
order by COUNT(customer_key) DESC

--Total Customers by Gender
SELECT gender,COUNT(customer_key) as total_customers
from gold.dim_customers
group by gender
order by COUNT(customer_key) DESC

--Total Products by category

SELECT COALESCE(category,'Uncategorized') as Category,COUNT(product_key) as total_products
from gold.dim_products
group by category
order by total_products DESC

--Average COst of Each Category
SELECT Coalesce(category,'Uncategorized') as category, avg(cost) as average_costs
from gold.dim_products
group by category
order by average_costs desc

--Total revenue generated by each category

select p.category, sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on f.product_key=p.product_key
group by p.category
order by total_revenue desc

--Total Revenue generated by each customer

select c.customer_key, c.first_name, c.last_name, sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_customers c
on f.customer_key=c.customer_key
group by c.customer_key, c.first_name, c.last_name
order by total_revenue desc

--Distribution of items sold across countries
select c.country, sum(f.quantity) total_items_sold
from gold.fact_sales f
left join gold.dim_customers c
on f.customer_key=c.customer_key
group by c.country
order by total_items_sold desc

--TopN BottomN Ranking Analyses

--Top 5 Products generating highest revenues
select top 5 p.product_name, sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on f.product_key=p.product_key
group by p.product_name
order by total_revenue desc

--Same task by using Window Ranking Functions
select * from(
select  p.product_name, sum(f.sales_amount) total_revenue,
dense_rank() over(order by sum(f.sales_amount) desc) as rn
from gold.fact_sales f
left join gold.dim_products p
on f.product_key=p.product_key
group by p.product_name)t
where rn<=5



--Bottom 5 worst performing products in terms of sale amounts
select top 5 p.product_name, sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_products p
on f.product_key=p.product_key
group by p.product_name
order by total_revenue 

--Window Function
select * from(
select  p.product_name, sum(f.sales_amount) total_revenue,
dense_rank() over(order by sum(f.sales_amount)) as rn
from gold.fact_sales f
left join gold.dim_products p
on f.product_key=p.product_key
group by p.product_name)t
where rn<=5

--Top 10 customers generating highest revenues
select top 10 c.customer_key, c.first_name, c.last_name, sum(f.sales_amount) total_revenue
from gold.fact_sales f
left join gold.dim_customers c
on f.customer_key=c.customer_key
group by c.customer_key, c.first_name, c.last_name
order by total_revenue desc

--3 customers with the fewest orders placed

select top 3 c.customer_key, c.first_name, c.last_name, count(distinct f.order_number) total_orders
from gold.fact_sales f
left join gold.dim_customers c
on f.customer_key=c.customer_key
group by c.customer_key, c.first_name, c.last_name
order by total_orders 